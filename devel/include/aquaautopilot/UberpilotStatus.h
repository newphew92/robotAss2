// Generated by gencpp from file aquaautopilot/UberpilotStatus.msg
// DO NOT EDIT!


#ifndef AQUAAUTOPILOT_MESSAGE_UBERPILOTSTATUS_H
#define AQUAAUTOPILOT_MESSAGE_UBERPILOTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aquaautopilot
{
template <class ContainerAllocator>
struct UberpilotStatus_
{
  typedef UberpilotStatus_<ContainerAllocator> Type;

  UberpilotStatus_()
    : roll_p_gain(0.0)
    , pitch_p_gain(0.0)
    , yaw_p_gain(0.0)
    , roll_i_gain(0.0)
    , pitch_i_gain(0.0)
    , yaw_i_gain(0.0)
    , roll_d_gain(0.0)
    , pitch_d_gain(0.0)
    , yaw_d_gain(0.0)
    , roll_const_gain(0.0)
    , roll_error(0.0)
    , pitch_error(0.0)
    , yaw_error(0.0)
    , depth_error(0.0)
    , roll_error_integral(0.0)
    , pitch_error_integral(0.0)
    , yaw_error_integral(0.0)
    , roll_p_contrib(0.0)
    , pitch_p_contrib(0.0)
    , yaw_p_contrib(0.0)
    , roll_i_contrib(0.0)
    , pitch_i_contrib(0.0)
    , yaw_i_contrib(0.0)
    , roll_d_contrib(0.0)
    , pitch_d_contrib(0.0)
    , yaw_d_contrib(0.0)
    , roll_const_contrib(0.0)
    , depth_p_gain(0.0)
    , depth_d_gain(0.0)
    , depth_derivative(0.0)
    , depth_p_contrib(0.0)
    , depth_d_contrib(0.0)
    , resultant_roll(0.0)
    , resultant_pitch(0.0)
    , resultant_yaw(0.0)
    , filtered_depth_derivative(0.0)
    , depth_d_filter_period(0.0)
    , filtered_roll_deriv(0.0)
    , filtered_pitch_deriv(0.0)
    , filtered_yaw_deriv(0.0)
    , roll_d_filter_period(0.0)
    , pitch_d_filter_period(0.0)
    , yaw_d_filter_period(0.0)
    , roll_target(0.0)
    , pitch_target(0.0)
    , yaw_target(0.0)
    , current_roll(0.0)
    , current_pitch(0.0)
    , current_yaw(0.0)  {
    }
  UberpilotStatus_(const ContainerAllocator& _alloc)
    : roll_p_gain(0.0)
    , pitch_p_gain(0.0)
    , yaw_p_gain(0.0)
    , roll_i_gain(0.0)
    , pitch_i_gain(0.0)
    , yaw_i_gain(0.0)
    , roll_d_gain(0.0)
    , pitch_d_gain(0.0)
    , yaw_d_gain(0.0)
    , roll_const_gain(0.0)
    , roll_error(0.0)
    , pitch_error(0.0)
    , yaw_error(0.0)
    , depth_error(0.0)
    , roll_error_integral(0.0)
    , pitch_error_integral(0.0)
    , yaw_error_integral(0.0)
    , roll_p_contrib(0.0)
    , pitch_p_contrib(0.0)
    , yaw_p_contrib(0.0)
    , roll_i_contrib(0.0)
    , pitch_i_contrib(0.0)
    , yaw_i_contrib(0.0)
    , roll_d_contrib(0.0)
    , pitch_d_contrib(0.0)
    , yaw_d_contrib(0.0)
    , roll_const_contrib(0.0)
    , depth_p_gain(0.0)
    , depth_d_gain(0.0)
    , depth_derivative(0.0)
    , depth_p_contrib(0.0)
    , depth_d_contrib(0.0)
    , resultant_roll(0.0)
    , resultant_pitch(0.0)
    , resultant_yaw(0.0)
    , filtered_depth_derivative(0.0)
    , depth_d_filter_period(0.0)
    , filtered_roll_deriv(0.0)
    , filtered_pitch_deriv(0.0)
    , filtered_yaw_deriv(0.0)
    , roll_d_filter_period(0.0)
    , pitch_d_filter_period(0.0)
    , yaw_d_filter_period(0.0)
    , roll_target(0.0)
    , pitch_target(0.0)
    , yaw_target(0.0)
    , current_roll(0.0)
    , current_pitch(0.0)
    , current_yaw(0.0)  {
    }



   typedef double _roll_p_gain_type;
  _roll_p_gain_type roll_p_gain;

   typedef double _pitch_p_gain_type;
  _pitch_p_gain_type pitch_p_gain;

   typedef double _yaw_p_gain_type;
  _yaw_p_gain_type yaw_p_gain;

   typedef double _roll_i_gain_type;
  _roll_i_gain_type roll_i_gain;

   typedef double _pitch_i_gain_type;
  _pitch_i_gain_type pitch_i_gain;

   typedef double _yaw_i_gain_type;
  _yaw_i_gain_type yaw_i_gain;

   typedef double _roll_d_gain_type;
  _roll_d_gain_type roll_d_gain;

   typedef double _pitch_d_gain_type;
  _pitch_d_gain_type pitch_d_gain;

   typedef double _yaw_d_gain_type;
  _yaw_d_gain_type yaw_d_gain;

   typedef double _roll_const_gain_type;
  _roll_const_gain_type roll_const_gain;

   typedef double _roll_error_type;
  _roll_error_type roll_error;

   typedef double _pitch_error_type;
  _pitch_error_type pitch_error;

   typedef double _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef double _depth_error_type;
  _depth_error_type depth_error;

   typedef double _roll_error_integral_type;
  _roll_error_integral_type roll_error_integral;

   typedef double _pitch_error_integral_type;
  _pitch_error_integral_type pitch_error_integral;

   typedef double _yaw_error_integral_type;
  _yaw_error_integral_type yaw_error_integral;

   typedef double _roll_p_contrib_type;
  _roll_p_contrib_type roll_p_contrib;

   typedef double _pitch_p_contrib_type;
  _pitch_p_contrib_type pitch_p_contrib;

   typedef double _yaw_p_contrib_type;
  _yaw_p_contrib_type yaw_p_contrib;

   typedef double _roll_i_contrib_type;
  _roll_i_contrib_type roll_i_contrib;

   typedef double _pitch_i_contrib_type;
  _pitch_i_contrib_type pitch_i_contrib;

   typedef double _yaw_i_contrib_type;
  _yaw_i_contrib_type yaw_i_contrib;

   typedef double _roll_d_contrib_type;
  _roll_d_contrib_type roll_d_contrib;

   typedef double _pitch_d_contrib_type;
  _pitch_d_contrib_type pitch_d_contrib;

   typedef double _yaw_d_contrib_type;
  _yaw_d_contrib_type yaw_d_contrib;

   typedef double _roll_const_contrib_type;
  _roll_const_contrib_type roll_const_contrib;

   typedef double _depth_p_gain_type;
  _depth_p_gain_type depth_p_gain;

   typedef double _depth_d_gain_type;
  _depth_d_gain_type depth_d_gain;

   typedef double _depth_derivative_type;
  _depth_derivative_type depth_derivative;

   typedef double _depth_p_contrib_type;
  _depth_p_contrib_type depth_p_contrib;

   typedef double _depth_d_contrib_type;
  _depth_d_contrib_type depth_d_contrib;

   typedef double _resultant_roll_type;
  _resultant_roll_type resultant_roll;

   typedef double _resultant_pitch_type;
  _resultant_pitch_type resultant_pitch;

   typedef double _resultant_yaw_type;
  _resultant_yaw_type resultant_yaw;

   typedef double _filtered_depth_derivative_type;
  _filtered_depth_derivative_type filtered_depth_derivative;

   typedef double _depth_d_filter_period_type;
  _depth_d_filter_period_type depth_d_filter_period;

   typedef double _filtered_roll_deriv_type;
  _filtered_roll_deriv_type filtered_roll_deriv;

   typedef double _filtered_pitch_deriv_type;
  _filtered_pitch_deriv_type filtered_pitch_deriv;

   typedef double _filtered_yaw_deriv_type;
  _filtered_yaw_deriv_type filtered_yaw_deriv;

   typedef double _roll_d_filter_period_type;
  _roll_d_filter_period_type roll_d_filter_period;

   typedef double _pitch_d_filter_period_type;
  _pitch_d_filter_period_type pitch_d_filter_period;

   typedef double _yaw_d_filter_period_type;
  _yaw_d_filter_period_type yaw_d_filter_period;

   typedef double _roll_target_type;
  _roll_target_type roll_target;

   typedef double _pitch_target_type;
  _pitch_target_type pitch_target;

   typedef double _yaw_target_type;
  _yaw_target_type yaw_target;

   typedef double _current_roll_type;
  _current_roll_type current_roll;

   typedef double _current_pitch_type;
  _current_pitch_type current_pitch;

   typedef double _current_yaw_type;
  _current_yaw_type current_yaw;




  typedef boost::shared_ptr< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> const> ConstPtr;

}; // struct UberpilotStatus_

typedef ::aquaautopilot::UberpilotStatus_<std::allocator<void> > UberpilotStatus;

typedef boost::shared_ptr< ::aquaautopilot::UberpilotStatus > UberpilotStatusPtr;
typedef boost::shared_ptr< ::aquaautopilot::UberpilotStatus const> UberpilotStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquaautopilot::UberpilotStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquaautopilot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'aquaautopilot': ['/home/2014/tko4/robotAss1/src/aquaautopilot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9759835ed61618efecb1f4276b2aa836";
  }

  static const char* value(const ::aquaautopilot::UberpilotStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9759835ed61618efULL;
  static const uint64_t static_value2 = 0xecb1f4276b2aa836ULL;
};

template<class ContainerAllocator>
struct DataType< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquaautopilot/UberpilotStatus";
  }

  static const char* value(const ::aquaautopilot::UberpilotStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 roll_p_gain\n\
float64 pitch_p_gain\n\
float64 yaw_p_gain\n\
float64 roll_i_gain\n\
float64 pitch_i_gain\n\
float64 yaw_i_gain\n\
float64 roll_d_gain\n\
float64 pitch_d_gain\n\
float64 yaw_d_gain\n\
float64 roll_const_gain\n\
\n\
float64 roll_error\n\
float64 pitch_error\n\
float64 yaw_error\n\
float64 depth_error\n\
\n\
float64 roll_error_integral\n\
float64 pitch_error_integral\n\
float64 yaw_error_integral\n\
\n\
float64 roll_p_contrib\n\
float64 pitch_p_contrib\n\
float64 yaw_p_contrib\n\
float64 roll_i_contrib\n\
float64 pitch_i_contrib\n\
float64 yaw_i_contrib\n\
float64 roll_d_contrib\n\
float64 pitch_d_contrib\n\
float64 yaw_d_contrib\n\
float64 roll_const_contrib\n\
\n\
float64 depth_p_gain\n\
float64 depth_d_gain\n\
float64 depth_derivative\n\
float64 depth_p_contrib\n\
float64 depth_d_contrib\n\
\n\
float64 resultant_roll\n\
float64 resultant_pitch\n\
float64 resultant_yaw\n\
\n\
float64 filtered_depth_derivative\n\
float64 depth_d_filter_period\n\
\n\
float64 filtered_roll_deriv\n\
float64 filtered_pitch_deriv\n\
float64 filtered_yaw_deriv\n\
float64 roll_d_filter_period\n\
float64 pitch_d_filter_period\n\
float64 yaw_d_filter_period\n\
\n\
float64 roll_target\n\
float64 pitch_target\n\
float64 yaw_target\n\
\n\
float64 current_roll\n\
float64 current_pitch\n\
float64 current_yaw\n\
";
  }

  static const char* value(const ::aquaautopilot::UberpilotStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll_p_gain);
      stream.next(m.pitch_p_gain);
      stream.next(m.yaw_p_gain);
      stream.next(m.roll_i_gain);
      stream.next(m.pitch_i_gain);
      stream.next(m.yaw_i_gain);
      stream.next(m.roll_d_gain);
      stream.next(m.pitch_d_gain);
      stream.next(m.yaw_d_gain);
      stream.next(m.roll_const_gain);
      stream.next(m.roll_error);
      stream.next(m.pitch_error);
      stream.next(m.yaw_error);
      stream.next(m.depth_error);
      stream.next(m.roll_error_integral);
      stream.next(m.pitch_error_integral);
      stream.next(m.yaw_error_integral);
      stream.next(m.roll_p_contrib);
      stream.next(m.pitch_p_contrib);
      stream.next(m.yaw_p_contrib);
      stream.next(m.roll_i_contrib);
      stream.next(m.pitch_i_contrib);
      stream.next(m.yaw_i_contrib);
      stream.next(m.roll_d_contrib);
      stream.next(m.pitch_d_contrib);
      stream.next(m.yaw_d_contrib);
      stream.next(m.roll_const_contrib);
      stream.next(m.depth_p_gain);
      stream.next(m.depth_d_gain);
      stream.next(m.depth_derivative);
      stream.next(m.depth_p_contrib);
      stream.next(m.depth_d_contrib);
      stream.next(m.resultant_roll);
      stream.next(m.resultant_pitch);
      stream.next(m.resultant_yaw);
      stream.next(m.filtered_depth_derivative);
      stream.next(m.depth_d_filter_period);
      stream.next(m.filtered_roll_deriv);
      stream.next(m.filtered_pitch_deriv);
      stream.next(m.filtered_yaw_deriv);
      stream.next(m.roll_d_filter_period);
      stream.next(m.pitch_d_filter_period);
      stream.next(m.yaw_d_filter_period);
      stream.next(m.roll_target);
      stream.next(m.pitch_target);
      stream.next(m.yaw_target);
      stream.next(m.current_roll);
      stream.next(m.current_pitch);
      stream.next(m.current_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UberpilotStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquaautopilot::UberpilotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquaautopilot::UberpilotStatus_<ContainerAllocator>& v)
  {
    s << indent << "roll_p_gain: ";
    Printer<double>::stream(s, indent + "  ", v.roll_p_gain);
    s << indent << "pitch_p_gain: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_p_gain);
    s << indent << "yaw_p_gain: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_p_gain);
    s << indent << "roll_i_gain: ";
    Printer<double>::stream(s, indent + "  ", v.roll_i_gain);
    s << indent << "pitch_i_gain: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_i_gain);
    s << indent << "yaw_i_gain: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_i_gain);
    s << indent << "roll_d_gain: ";
    Printer<double>::stream(s, indent + "  ", v.roll_d_gain);
    s << indent << "pitch_d_gain: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_d_gain);
    s << indent << "yaw_d_gain: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_d_gain);
    s << indent << "roll_const_gain: ";
    Printer<double>::stream(s, indent + "  ", v.roll_const_gain);
    s << indent << "roll_error: ";
    Printer<double>::stream(s, indent + "  ", v.roll_error);
    s << indent << "pitch_error: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_error);
    s << indent << "yaw_error: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "depth_error: ";
    Printer<double>::stream(s, indent + "  ", v.depth_error);
    s << indent << "roll_error_integral: ";
    Printer<double>::stream(s, indent + "  ", v.roll_error_integral);
    s << indent << "pitch_error_integral: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_error_integral);
    s << indent << "yaw_error_integral: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_error_integral);
    s << indent << "roll_p_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.roll_p_contrib);
    s << indent << "pitch_p_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_p_contrib);
    s << indent << "yaw_p_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_p_contrib);
    s << indent << "roll_i_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.roll_i_contrib);
    s << indent << "pitch_i_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_i_contrib);
    s << indent << "yaw_i_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_i_contrib);
    s << indent << "roll_d_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.roll_d_contrib);
    s << indent << "pitch_d_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_d_contrib);
    s << indent << "yaw_d_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_d_contrib);
    s << indent << "roll_const_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.roll_const_contrib);
    s << indent << "depth_p_gain: ";
    Printer<double>::stream(s, indent + "  ", v.depth_p_gain);
    s << indent << "depth_d_gain: ";
    Printer<double>::stream(s, indent + "  ", v.depth_d_gain);
    s << indent << "depth_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.depth_derivative);
    s << indent << "depth_p_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.depth_p_contrib);
    s << indent << "depth_d_contrib: ";
    Printer<double>::stream(s, indent + "  ", v.depth_d_contrib);
    s << indent << "resultant_roll: ";
    Printer<double>::stream(s, indent + "  ", v.resultant_roll);
    s << indent << "resultant_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.resultant_pitch);
    s << indent << "resultant_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.resultant_yaw);
    s << indent << "filtered_depth_derivative: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_depth_derivative);
    s << indent << "depth_d_filter_period: ";
    Printer<double>::stream(s, indent + "  ", v.depth_d_filter_period);
    s << indent << "filtered_roll_deriv: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_roll_deriv);
    s << indent << "filtered_pitch_deriv: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_pitch_deriv);
    s << indent << "filtered_yaw_deriv: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_yaw_deriv);
    s << indent << "roll_d_filter_period: ";
    Printer<double>::stream(s, indent + "  ", v.roll_d_filter_period);
    s << indent << "pitch_d_filter_period: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_d_filter_period);
    s << indent << "yaw_d_filter_period: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_d_filter_period);
    s << indent << "roll_target: ";
    Printer<double>::stream(s, indent + "  ", v.roll_target);
    s << indent << "pitch_target: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_target);
    s << indent << "yaw_target: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_target);
    s << indent << "current_roll: ";
    Printer<double>::stream(s, indent + "  ", v.current_roll);
    s << indent << "current_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.current_pitch);
    s << indent << "current_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.current_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUAAUTOPILOT_MESSAGE_UBERPILOTSTATUS_H
