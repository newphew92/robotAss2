// Generated by gencpp from file aquajoy/AquaTeleopJoyParams.msg
// DO NOT EDIT!


#ifndef AQUAJOY_MESSAGE_AQUATELEOPJOYPARAMS_H
#define AQUAJOY_MESSAGE_AQUATELEOPJOYPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aquajoy
{
template <class ContainerAllocator>
struct AquaTeleopJoyParams_
{
  typedef AquaTeleopJoyParams_<ContainerAllocator> Type;

  AquaTeleopJoyParams_()
    : joy_axis_deadzone(0.0)
    , max_speed_cmd(0.0)
    , max_heave_cmd(0.0)
    , max_roll_cmd(0.0)
    , max_pitch_cmd(0.0)
    , max_yaw_cmd(0.0)
    , max_roll_pos(0.0)
    , max_pitch_pos(0.0)
    , max_yaw_pos(0.0)
    , min_depth(0.0)
    , max_depth(0.0)
    , default_fixed_depth(0.0)
    , max_roll_vel(0.0)
    , max_pitch_vel(0.0)
    , max_yaw_vel(0.0)
    , max_depth_vel(0.0)  {
    }
  AquaTeleopJoyParams_(const ContainerAllocator& _alloc)
    : joy_axis_deadzone(0.0)
    , max_speed_cmd(0.0)
    , max_heave_cmd(0.0)
    , max_roll_cmd(0.0)
    , max_pitch_cmd(0.0)
    , max_yaw_cmd(0.0)
    , max_roll_pos(0.0)
    , max_pitch_pos(0.0)
    , max_yaw_pos(0.0)
    , min_depth(0.0)
    , max_depth(0.0)
    , default_fixed_depth(0.0)
    , max_roll_vel(0.0)
    , max_pitch_vel(0.0)
    , max_yaw_vel(0.0)
    , max_depth_vel(0.0)  {
    }



   typedef double _joy_axis_deadzone_type;
  _joy_axis_deadzone_type joy_axis_deadzone;

   typedef double _max_speed_cmd_type;
  _max_speed_cmd_type max_speed_cmd;

   typedef double _max_heave_cmd_type;
  _max_heave_cmd_type max_heave_cmd;

   typedef double _max_roll_cmd_type;
  _max_roll_cmd_type max_roll_cmd;

   typedef double _max_pitch_cmd_type;
  _max_pitch_cmd_type max_pitch_cmd;

   typedef double _max_yaw_cmd_type;
  _max_yaw_cmd_type max_yaw_cmd;

   typedef double _max_roll_pos_type;
  _max_roll_pos_type max_roll_pos;

   typedef double _max_pitch_pos_type;
  _max_pitch_pos_type max_pitch_pos;

   typedef double _max_yaw_pos_type;
  _max_yaw_pos_type max_yaw_pos;

   typedef double _min_depth_type;
  _min_depth_type min_depth;

   typedef double _max_depth_type;
  _max_depth_type max_depth;

   typedef double _default_fixed_depth_type;
  _default_fixed_depth_type default_fixed_depth;

   typedef double _max_roll_vel_type;
  _max_roll_vel_type max_roll_vel;

   typedef double _max_pitch_vel_type;
  _max_pitch_vel_type max_pitch_vel;

   typedef double _max_yaw_vel_type;
  _max_yaw_vel_type max_yaw_vel;

   typedef double _max_depth_vel_type;
  _max_depth_vel_type max_depth_vel;




  typedef boost::shared_ptr< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> const> ConstPtr;

}; // struct AquaTeleopJoyParams_

typedef ::aquajoy::AquaTeleopJoyParams_<std::allocator<void> > AquaTeleopJoyParams;

typedef boost::shared_ptr< ::aquajoy::AquaTeleopJoyParams > AquaTeleopJoyParamsPtr;
typedef boost::shared_ptr< ::aquajoy::AquaTeleopJoyParams const> AquaTeleopJoyParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquajoy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'aquajoy': ['/home/2014/tko4/robotAss1/src/aquajoy/msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "706bf780e630eefcca324213e5cf91d4";
  }

  static const char* value(const ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x706bf780e630eefcULL;
  static const uint64_t static_value2 = 0xca324213e5cf91d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquajoy/AquaTeleopJoyParams";
  }

  static const char* value(const ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Range: [0, 1]\n\
float64 joy_axis_deadzone\n\
  \n\
# Range: [0, 1]\n\
float64 max_speed_cmd\n\
float64 max_heave_cmd\n\
float64 max_roll_cmd\n\
float64 max_pitch_cmd\n\
float64 max_yaw_cmd\n\
  \n\
# Recommended range: [0, 180] (degrees)\n\
float64 max_roll_pos\n\
float64 max_pitch_pos\n\
float64 max_yaw_pos\n\
\n\
# Recommended range: [-2, 1] (m)\n\
float64 min_depth\n\
\n\
# Recommended range: [0, 100] (m)\n\
float64 max_depth\n\
\n\
# Use fixed initial depth (m) upon entering depth-related modes [if < 0, then initial depth is current robot depth]\n\
float64 default_fixed_depth\n\
  \n\
# Recommended range: [0, 180] (deg/s)\n\
float64 max_roll_vel\n\
float64 max_pitch_vel\n\
float64 max_yaw_vel\n\
  \n\
# Recommended range: [0, 1] (m/s)\n\
float64 max_depth_vel\n\
";
  }

  static const char* value(const ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joy_axis_deadzone);
      stream.next(m.max_speed_cmd);
      stream.next(m.max_heave_cmd);
      stream.next(m.max_roll_cmd);
      stream.next(m.max_pitch_cmd);
      stream.next(m.max_yaw_cmd);
      stream.next(m.max_roll_pos);
      stream.next(m.max_pitch_pos);
      stream.next(m.max_yaw_pos);
      stream.next(m.min_depth);
      stream.next(m.max_depth);
      stream.next(m.default_fixed_depth);
      stream.next(m.max_roll_vel);
      stream.next(m.max_pitch_vel);
      stream.next(m.max_yaw_vel);
      stream.next(m.max_depth_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct AquaTeleopJoyParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquajoy::AquaTeleopJoyParams_<ContainerAllocator>& v)
  {
    s << indent << "joy_axis_deadzone: ";
    Printer<double>::stream(s, indent + "  ", v.joy_axis_deadzone);
    s << indent << "max_speed_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.max_speed_cmd);
    s << indent << "max_heave_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.max_heave_cmd);
    s << indent << "max_roll_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.max_roll_cmd);
    s << indent << "max_pitch_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.max_pitch_cmd);
    s << indent << "max_yaw_cmd: ";
    Printer<double>::stream(s, indent + "  ", v.max_yaw_cmd);
    s << indent << "max_roll_pos: ";
    Printer<double>::stream(s, indent + "  ", v.max_roll_pos);
    s << indent << "max_pitch_pos: ";
    Printer<double>::stream(s, indent + "  ", v.max_pitch_pos);
    s << indent << "max_yaw_pos: ";
    Printer<double>::stream(s, indent + "  ", v.max_yaw_pos);
    s << indent << "min_depth: ";
    Printer<double>::stream(s, indent + "  ", v.min_depth);
    s << indent << "max_depth: ";
    Printer<double>::stream(s, indent + "  ", v.max_depth);
    s << indent << "default_fixed_depth: ";
    Printer<double>::stream(s, indent + "  ", v.default_fixed_depth);
    s << indent << "max_roll_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_roll_vel);
    s << indent << "max_pitch_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_pitch_vel);
    s << indent << "max_yaw_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_yaw_vel);
    s << indent << "max_depth_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_depth_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUAJOY_MESSAGE_AQUATELEOPJOYPARAMS_H
