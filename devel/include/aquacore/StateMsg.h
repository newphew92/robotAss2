// Generated by gencpp from file aquacore/StateMsg.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_STATEMSG_H
#define AQUACORE_MESSAGE_STATEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace aquacore
{
template <class ContainerAllocator>
struct StateMsg_
{
  typedef StateMsg_<ContainerAllocator> Type;

  StateMsg_()
    : header()
    , LED(0)
    , Gait(0)
    , RollAngle(0.0)
    , PitchAngle(0.0)
    , YawAngle(0.0)
    , RollTargetAngle(0.0)
    , PitchTargetAngle(0.0)
    , YawTargetAngle(0.0)
    , DepthTarget(0.0)
    , AvgRollCommand(0.0)
    , AvgPitchCommand(0.0)
    , AvgYawCommand(0.0)
    , AvgHeaveCommand(0.0)
    , AvgSurgeCommand(0.0)
    , AutopilotMode(0)
    , Depth(0.0)
    , Speed(0.0)  {
    }
  StateMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LED(0)
    , Gait(0)
    , RollAngle(0.0)
    , PitchAngle(0.0)
    , YawAngle(0.0)
    , RollTargetAngle(0.0)
    , PitchTargetAngle(0.0)
    , YawTargetAngle(0.0)
    , DepthTarget(0.0)
    , AvgRollCommand(0.0)
    , AvgPitchCommand(0.0)
    , AvgYawCommand(0.0)
    , AvgHeaveCommand(0.0)
    , AvgSurgeCommand(0.0)
    , AutopilotMode(0)
    , Depth(0.0)
    , Speed(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _LED_type;
  _LED_type LED;

   typedef int32_t _Gait_type;
  _Gait_type Gait;

   typedef float _RollAngle_type;
  _RollAngle_type RollAngle;

   typedef float _PitchAngle_type;
  _PitchAngle_type PitchAngle;

   typedef float _YawAngle_type;
  _YawAngle_type YawAngle;

   typedef float _RollTargetAngle_type;
  _RollTargetAngle_type RollTargetAngle;

   typedef float _PitchTargetAngle_type;
  _PitchTargetAngle_type PitchTargetAngle;

   typedef float _YawTargetAngle_type;
  _YawTargetAngle_type YawTargetAngle;

   typedef float _DepthTarget_type;
  _DepthTarget_type DepthTarget;

   typedef float _AvgRollCommand_type;
  _AvgRollCommand_type AvgRollCommand;

   typedef float _AvgPitchCommand_type;
  _AvgPitchCommand_type AvgPitchCommand;

   typedef float _AvgYawCommand_type;
  _AvgYawCommand_type AvgYawCommand;

   typedef float _AvgHeaveCommand_type;
  _AvgHeaveCommand_type AvgHeaveCommand;

   typedef float _AvgSurgeCommand_type;
  _AvgSurgeCommand_type AvgSurgeCommand;

   typedef int32_t _AutopilotMode_type;
  _AutopilotMode_type AutopilotMode;

   typedef float _Depth_type;
  _Depth_type Depth;

   typedef float _Speed_type;
  _Speed_type Speed;




  typedef boost::shared_ptr< ::aquacore::StateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::StateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct StateMsg_

typedef ::aquacore::StateMsg_<std::allocator<void> > StateMsg;

typedef boost::shared_ptr< ::aquacore::StateMsg > StateMsgPtr;
typedef boost::shared_ptr< ::aquacore::StateMsg const> StateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::StateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::StateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::StateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::StateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::StateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::StateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::StateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::StateMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::StateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b043d5655d703b4e0a8858969aca929";
  }

  static const char* value(const ::aquacore::StateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b043d5655d703b4ULL;
  static const uint64_t static_value2 = 0xe0a8858969aca929ULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::StateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/StateMsg";
  }

  static const char* value(const ::aquacore::StateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::StateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 LED\n\
int32 Gait\n\
\n\
float32 RollAngle\n\
float32 PitchAngle\n\
float32 YawAngle\n\
\n\
float32 RollTargetAngle\n\
float32 PitchTargetAngle\n\
float32 YawTargetAngle\n\
float32 DepthTarget\n\
\n\
float32 AvgRollCommand\n\
float32 AvgPitchCommand\n\
float32 AvgYawCommand\n\
float32 AvgHeaveCommand\n\
float32 AvgSurgeCommand\n\
\n\
int32 AutopilotMode\n\
float32 Depth\n\
float32 Speed\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::aquacore::StateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::StateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LED);
      stream.next(m.Gait);
      stream.next(m.RollAngle);
      stream.next(m.PitchAngle);
      stream.next(m.YawAngle);
      stream.next(m.RollTargetAngle);
      stream.next(m.PitchTargetAngle);
      stream.next(m.YawTargetAngle);
      stream.next(m.DepthTarget);
      stream.next(m.AvgRollCommand);
      stream.next(m.AvgPitchCommand);
      stream.next(m.AvgYawCommand);
      stream.next(m.AvgHeaveCommand);
      stream.next(m.AvgSurgeCommand);
      stream.next(m.AutopilotMode);
      stream.next(m.Depth);
      stream.next(m.Speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct StateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::StateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::StateMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LED);
    s << indent << "Gait: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Gait);
    s << indent << "RollAngle: ";
    Printer<float>::stream(s, indent + "  ", v.RollAngle);
    s << indent << "PitchAngle: ";
    Printer<float>::stream(s, indent + "  ", v.PitchAngle);
    s << indent << "YawAngle: ";
    Printer<float>::stream(s, indent + "  ", v.YawAngle);
    s << indent << "RollTargetAngle: ";
    Printer<float>::stream(s, indent + "  ", v.RollTargetAngle);
    s << indent << "PitchTargetAngle: ";
    Printer<float>::stream(s, indent + "  ", v.PitchTargetAngle);
    s << indent << "YawTargetAngle: ";
    Printer<float>::stream(s, indent + "  ", v.YawTargetAngle);
    s << indent << "DepthTarget: ";
    Printer<float>::stream(s, indent + "  ", v.DepthTarget);
    s << indent << "AvgRollCommand: ";
    Printer<float>::stream(s, indent + "  ", v.AvgRollCommand);
    s << indent << "AvgPitchCommand: ";
    Printer<float>::stream(s, indent + "  ", v.AvgPitchCommand);
    s << indent << "AvgYawCommand: ";
    Printer<float>::stream(s, indent + "  ", v.AvgYawCommand);
    s << indent << "AvgHeaveCommand: ";
    Printer<float>::stream(s, indent + "  ", v.AvgHeaveCommand);
    s << indent << "AvgSurgeCommand: ";
    Printer<float>::stream(s, indent + "  ", v.AvgSurgeCommand);
    s << indent << "AutopilotMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AutopilotMode);
    s << indent << "Depth: ";
    Printer<float>::stream(s, indent + "  ", v.Depth);
    s << indent << "Speed: ";
    Printer<float>::stream(s, indent + "  ", v.Speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_STATEMSG_H
