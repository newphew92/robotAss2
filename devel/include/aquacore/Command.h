// Generated by gencpp from file aquacore/Command.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_COMMAND_H
#define AQUACORE_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aquacore
{
template <class ContainerAllocator>
struct Command_
{
  typedef Command_<ContainerAllocator> Type;

  Command_()
    : speed(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , heave(0.0)  {
    }
  Command_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , heave(0.0)  {
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _heave_type;
  _heave_type heave;




  typedef boost::shared_ptr< ::aquacore::Command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::Command_<ContainerAllocator> const> ConstPtr;

}; // struct Command_

typedef ::aquacore::Command_<std::allocator<void> > Command;

typedef boost::shared_ptr< ::aquacore::Command > CommandPtr;
typedef boost::shared_ptr< ::aquacore::Command const> CommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::Command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::Command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::Command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::Command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::Command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::Command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25d10593eab44377302838c0a409503e";
  }

  static const char* value(const ::aquacore::Command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25d10593eab44377ULL;
  static const uint64_t static_value2 = 0x302838c0a409503eULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/Command";
  }

  static const char* value(const ::aquacore::Command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::Command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# All of the following are pseudo-rates, meaning that they are correlated to the distance / time in a\n\
# non-linear way; see Giguere et al. IROS 2006 \"Characterizing...\" for similar pseudo-rate mapping plots\n\
# on Aqua 1.0. Do keep in mind that these plots do not apply for Aqua 2.0+, which do not have proper mappings yet.\n\
\n\
# All saturations are performed by RoboDevel\n\
\n\
float32 speed # unitless pseudo-rate, [0, 1]\n\
float32 yaw   # unitless pseudo-rate, [-1, 1] # +1: yaw right\n\
float32 pitch # unitless pseudo-rate, [-1, 1] # +1: pitch forwards down\n\
float32 roll  # unitless pseudo-rate, [-1, 1] # +1: roll right\n\
float32 heave # unitless pseudo-rate, [-1, 1] # +1: heave up\n\
\n\
";
  }

  static const char* value(const ::aquacore::Command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::Command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.heave);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::Command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::Command_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "heave: ";
    Printer<float>::stream(s, indent + "  ", v.heave);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_COMMAND_H
