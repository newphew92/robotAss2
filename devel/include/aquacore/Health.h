// Generated by gencpp from file aquacore/Health.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_HEALTH_H
#define AQUACORE_MESSAGE_HEALTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace aquacore
{
template <class ContainerAllocator>
struct Health_
{
  typedef Health_<ContainerAllocator> Type;

  Health_()
    : header()
    , positions()
    , temperatures()
    , voltage(0.0)
    , current(0.0)
    , avgvoltage(0.0)
    , avgcurrent(0.0)
    , avgpower(0.0)
    , battery_dod(0.0)
    , hs_temp()  {
    }
  Health_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , positions(_alloc)
    , temperatures(_alloc)
    , voltage(0.0)
    , current(0.0)
    , avgvoltage(0.0)
    , avgcurrent(0.0)
    , avgpower(0.0)
    , battery_dod(0.0)
    , hs_temp(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _positions_type;
  _positions_type positions;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _temperatures_type;
  _temperatures_type temperatures;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _avgvoltage_type;
  _avgvoltage_type avgvoltage;

   typedef float _avgcurrent_type;
  _avgcurrent_type avgcurrent;

   typedef float _avgpower_type;
  _avgpower_type avgpower;

   typedef float _battery_dod_type;
  _battery_dod_type battery_dod;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _hs_temp_type;
  _hs_temp_type hs_temp;




  typedef boost::shared_ptr< ::aquacore::Health_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::Health_<ContainerAllocator> const> ConstPtr;

}; // struct Health_

typedef ::aquacore::Health_<std::allocator<void> > Health;

typedef boost::shared_ptr< ::aquacore::Health > HealthPtr;
typedef boost::shared_ptr< ::aquacore::Health const> HealthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::Health_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::Health_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::Health_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::Health_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::Health_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::Health_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0da3e4b5a27813e5a5902cdd7574858";
  }

  static const char* value(const ::aquacore::Health_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0da3e4b5a27813eULL;
  static const uint64_t static_value2 = 0x5a5902cdd7574858ULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/Health";
  }

  static const char* value(const ::aquacore::Health_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32[] positions   #leg positions\n\
float32[] temperatures #leg temprature\n\
float32 voltage\n\
float32 current\n\
float32 avgvoltage\n\
float32 avgcurrent\n\
float32 avgpower\n\
float32 battery_dod\n\
float32[] hs_temp \n\
\n\
#magnetometer\n\
#float32[] accelerations \n\
#float32 heading\n\
#float32 pitch\n\
#float32 roll\n\
#float32 dip\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::aquacore::Health_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::Health_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.positions);
      stream.next(m.temperatures);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.avgvoltage);
      stream.next(m.avgcurrent);
      stream.next(m.avgpower);
      stream.next(m.battery_dod);
      stream.next(m.hs_temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Health_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::Health_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::Health_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "temperatures[]" << std::endl;
    for (size_t i = 0; i < v.temperatures.size(); ++i)
    {
      s << indent << "  temperatures[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temperatures[i]);
    }
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "avgvoltage: ";
    Printer<float>::stream(s, indent + "  ", v.avgvoltage);
    s << indent << "avgcurrent: ";
    Printer<float>::stream(s, indent + "  ", v.avgcurrent);
    s << indent << "avgpower: ";
    Printer<float>::stream(s, indent + "  ", v.avgpower);
    s << indent << "battery_dod: ";
    Printer<float>::stream(s, indent + "  ", v.battery_dod);
    s << indent << "hs_temp[]" << std::endl;
    for (size_t i = 0; i < v.hs_temp.size(); ++i)
    {
      s << indent << "  hs_temp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.hs_temp[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_HEALTH_H
