// Generated by gencpp from file aquacore/GotoGoal.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_GOTOGOAL_H
#define AQUACORE_MESSAGE_GOTOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace aquacore
{
template <class ContainerAllocator>
struct GotoGoal_
{
  typedef GotoGoal_<ContainerAllocator> Type;

  GotoGoal_()
    : target_waypoint()
    , start_towards_last_bearing(false)  {
    }
  GotoGoal_(const ContainerAllocator& _alloc)
    : target_waypoint(_alloc)
    , start_towards_last_bearing(false)  {
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_waypoint_type;
  _target_waypoint_type target_waypoint;

   typedef uint8_t _start_towards_last_bearing_type;
  _start_towards_last_bearing_type start_towards_last_bearing;




  typedef boost::shared_ptr< ::aquacore::GotoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::GotoGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GotoGoal_

typedef ::aquacore::GotoGoal_<std::allocator<void> > GotoGoal;

typedef boost::shared_ptr< ::aquacore::GotoGoal > GotoGoalPtr;
typedef boost::shared_ptr< ::aquacore::GotoGoal const> GotoGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::GotoGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::GotoGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::GotoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::GotoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::GotoGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::GotoGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::GotoGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::GotoGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::GotoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fbff635c879e970e24112664f7e3eb1";
  }

  static const char* value(const ::aquacore::GotoGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fbff635c879e970ULL;
  static const uint64_t static_value2 = 0xe24112664f7e3eb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::GotoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/GotoGoal";
  }

  static const char* value(const ::aquacore::GotoGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::GotoGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Desired goal\n\
\n\
# (x,y) denotes latitude and longitude respectively (in degrees)\n\
# z denotes depth, > 0 above the water, 0 on the surface, < 0 underwater (in meters)\n\
# orientation is currently not handled \n\
geometry_msgs/Pose target_waypoint\n\
\n\
# True if we want to avoid a random step to initialize the global heading of the robot \n\
# and instead use the last known heading from the previous goal. \n\
# This is useful when we have a chain of goals to reach, one after the other, because\n\
# it avoids ugly turns in the beginning of the trajectory towards the next goal..\n\
bool   start_towards_last_bearing \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::aquacore::GotoGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::GotoGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_waypoint);
      stream.next(m.start_towards_last_bearing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GotoGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::GotoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::GotoGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_waypoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_waypoint);
    s << indent << "start_towards_last_bearing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_towards_last_bearing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_GOTOGOAL_H
