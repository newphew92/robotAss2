// Generated by gencpp from file aquacore/SwimForwardFeedback.msg
// DO NOT EDIT!


#ifndef AQUACORE_MESSAGE_SWIMFORWARDFEEDBACK_H
#define AQUACORE_MESSAGE_SWIMFORWARDFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aquacore
{
template <class ContainerAllocator>
struct SwimForwardFeedback_
{
  typedef SwimForwardFeedback_<ContainerAllocator> Type;

  SwimForwardFeedback_()
    : percent_time_completed(0.0)  {
    }
  SwimForwardFeedback_(const ContainerAllocator& _alloc)
    : percent_time_completed(0.0)  {
    }



   typedef double _percent_time_completed_type;
  _percent_time_completed_type percent_time_completed;




  typedef boost::shared_ptr< ::aquacore::SwimForwardFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aquacore::SwimForwardFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SwimForwardFeedback_

typedef ::aquacore::SwimForwardFeedback_<std::allocator<void> > SwimForwardFeedback;

typedef boost::shared_ptr< ::aquacore::SwimForwardFeedback > SwimForwardFeedbackPtr;
typedef boost::shared_ptr< ::aquacore::SwimForwardFeedback const> SwimForwardFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aquacore::SwimForwardFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aquacore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'aquacore': ['/home/2014/tko4/robotAss1/src/aquacore/msg', '/home/2014/tko4/robotAss1/devel/share/aquacore/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aquacore::SwimForwardFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aquacore::SwimForwardFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aquacore::SwimForwardFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5d72683b5876219c47676683509ce7c";
  }

  static const char* value(const ::aquacore::SwimForwardFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5d72683b5876219ULL;
  static const uint64_t static_value2 = 0xc47676683509ce7cULL;
};

template<class ContainerAllocator>
struct DataType< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aquacore/SwimForwardFeedback";
  }

  static const char* value(const ::aquacore::SwimForwardFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
# Feedback\n\
float64 percent_time_completed\n\
\n\
";
  }

  static const char* value(const ::aquacore::SwimForwardFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.percent_time_completed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SwimForwardFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aquacore::SwimForwardFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aquacore::SwimForwardFeedback_<ContainerAllocator>& v)
  {
    s << indent << "percent_time_completed: ";
    Printer<double>::stream(s, indent + "  ", v.percent_time_completed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AQUACORE_MESSAGE_SWIMFORWARDFEEDBACK_H
